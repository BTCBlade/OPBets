{"ast":null,"code":"import Cookies from 'js-cookie';\nexport async function fetch(url, options = {}) {\n  // set options.method to 'GET' if there is no method\n  options.method = options.method || 'GET'; // set options.headers to an empty object if there is no headers\n\n  options.headers = options.headers || {}; // if the options.method is not 'GET', then set the \"Content-Type\" header to\n  // \"application/json\", and set the \"CSRF-TOKEN\" header to the value of the\n  // \"XSRF-TOKEN\" cookie\n\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] = options.headers['Content-Type'] || 'application/json';\n    options.headers['XSRF-Token'] = Cookies.get('XSRF-TOKEN');\n  } // call the default window's fetch with the url and the options passed in\n\n\n  const res = await window.fetch(url, options); // if the response's body is JSON, then parse the JSON body and set it to a\n  // key of `data` on the response\n\n  const contentType = res.headers.get('content-type');\n\n  if (contentType && contentType.includes('application/json')) {\n    const data = await res.json();\n    res.data = data;\n  } // if the response status code is 400 or above, then throw an error with the\n  // error being the response\n\n\n  if (res.status >= 400) throw res; // if the response status code is under 400, then return the response to the\n  // next promise chain\n\n  return res;\n}\nexport function restoreCSRF() {\n  return fetch('/api/csrf/restore');\n}","map":{"version":3,"sources":["/Users/tommynchen/Downloads/opbets/frontend/src/store/csrf.js"],"names":["Cookies","fetch","url","options","method","headers","toUpperCase","get","res","window","contentType","includes","data","json","status","restoreCSRF"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA,OAAO,eAAeC,KAAf,CAAqBC,GAArB,EAA0BC,OAAO,GAAG,EAApC,EAAwC;AAC7C;AACAA,EAAAA,OAAO,CAACC,MAAR,GAAiBD,OAAO,CAACC,MAAR,IAAkB,KAAnC,CAF6C,CAG7C;;AACAD,EAAAA,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACE,OAAR,IAAmB,EAArC,CAJ6C,CAM7C;AACA;AACA;;AACA,MAAIF,OAAO,CAACC,MAAR,CAAeE,WAAf,OAAiC,KAArC,EAA4C;AAC1CH,IAAAA,OAAO,CAACE,OAAR,CAAgB,cAAhB,IACEF,OAAO,CAACE,OAAR,CAAgB,cAAhB,KAAmC,kBADrC;AAEAF,IAAAA,OAAO,CAACE,OAAR,CAAgB,YAAhB,IAAgCL,OAAO,CAACO,GAAR,CAAY,YAAZ,CAAhC;AACD,GAb4C,CAc7C;;;AACA,QAAMC,GAAG,GAAG,MAAMC,MAAM,CAACR,KAAP,CAAaC,GAAb,EAAkBC,OAAlB,CAAlB,CAf6C,CAiB7C;AACA;;AACA,QAAMO,WAAW,GAAGF,GAAG,CAACH,OAAJ,CAAYE,GAAZ,CAAgB,cAAhB,CAApB;;AACA,MAAIG,WAAW,IAAIA,WAAW,CAACC,QAAZ,CAAqB,kBAArB,CAAnB,EAA6D;AAC3D,UAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAnB;AACAL,IAAAA,GAAG,CAACI,IAAJ,GAAWA,IAAX;AACD,GAvB4C,CAyB7C;AACA;;;AACA,MAAIJ,GAAG,CAACM,MAAJ,IAAc,GAAlB,EAAuB,MAAMN,GAAN,CA3BsB,CA6B7C;AACA;;AACA,SAAOA,GAAP;AACD;AAED,OAAO,SAASO,WAAT,GAAuB;AAC5B,SAAOd,KAAK,CAAC,mBAAD,CAAZ;AACD","sourcesContent":["import Cookies from 'js-cookie';\n\nexport async function fetch(url, options = {}) {\n  // set options.method to 'GET' if there is no method\n  options.method = options.method || 'GET';\n  // set options.headers to an empty object if there is no headers\n  options.headers = options.headers || {};\n\n  // if the options.method is not 'GET', then set the \"Content-Type\" header to\n  // \"application/json\", and set the \"CSRF-TOKEN\" header to the value of the\n  // \"XSRF-TOKEN\" cookie\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] =\n      options.headers['Content-Type'] || 'application/json';\n    options.headers['XSRF-Token'] = Cookies.get('XSRF-TOKEN');\n  }\n  // call the default window's fetch with the url and the options passed in\n  const res = await window.fetch(url, options);\n\n  // if the response's body is JSON, then parse the JSON body and set it to a\n  // key of `data` on the response\n  const contentType = res.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    const data = await res.json();\n    res.data = data;\n  }\n\n  // if the response status code is 400 or above, then throw an error with the\n  // error being the response\n  if (res.status >= 400) throw res;\n\n  // if the response status code is under 400, then return the response to the\n  // next promise chain\n  return res;\n}\n\nexport function restoreCSRF() {\n  return fetch('/api/csrf/restore');\n}\n"]},"metadata":{},"sourceType":"module"}